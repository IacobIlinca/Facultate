        -:    0:Source:/mnt/c/Users/Ilinca/CLionProjects/lab1sda/TestExtins.cpp
        -:    0:Graph:/mnt/c/Users/Ilinca/CLionProjects/lab1sda/cmake-build-debug-coverage/CMakeFiles/lab1sda.dir/TestExtins.cpp.gcno
        -:    0:Data:/mnt/c/Users/Ilinca/CLionProjects/lab1sda/cmake-build-debug-coverage/CMakeFiles/lab1sda.dir/TestExtins.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Ilinca on 28-Mar-22.
        -:    3://
        -:    4:
        -:    5:
        -:    6:#include <assert.h>
        -:    7:#include "Matrice.h"
        -:    8:#include "TestExtins.h"
        -:    9:#include <iostream>
        -:   10:#include <exception>
        -:   11:
        -:   12:using namespace std;
        -:   13:
        -:   14:
function _Z11testCreeazav called 1 returned 100% blocks executed 78%
        1:   15:void testCreeaza() {
        2:   16:    Matrice m(10,10);
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16-block  1
call    3 returned 1
    $$$$$:   16-block  2
call    4 never executed
       1*:   17:    assert(m.nrLinii() == 10);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   17-block  2
call    5 never executed
       1*:   18:    assert(m.nrColoane() == 10);
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   18-block  2
call    5 never executed
       11:   19:    for(int i=0; i<m.nrLinii(); i++)
        1:   19-block  0
       11:   19-block  1
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   19-block  2
branch  3 taken 10 (fallthrough)
branch  4 taken 1
       10:   19-block  3
      110:   20:        for(int j=0; j<m.nrColoane(); j++)
       10:   20-block  0
      110:   20-block  1
call    0 returned 110
branch  1 taken 110 (fallthrough)
branch  2 taken 0 (throw)
      110:   20-block  2
branch  3 taken 100 (fallthrough)
branch  4 taken 10
      100:   20-block  3
     100*:   21:            assert(m.element(i,j) == NULL_TELEMENT);
      100:   21-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   21-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:   21-block  2
call    5 never executed
        1:   22:}
        -:   23:
function _Z10testAdaugav called 1 returned 100% blocks executed 85%
        1:   24:void testAdauga() {
        2:   25:    Matrice m(10,10);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
call    3 returned 1
    $$$$$:   25-block  2
call    4 never executed
       11:   26:    for(int j=0; j<m.nrColoane(); j++)
        1:   26-block  0
       11:   26-block  1
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   26-block  2
branch  3 taken 10 (fallthrough)
branch  4 taken 1
       10:   26-block  3
       10:   27:        m.modifica(4,j,3);
       10:   27-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       11:   28:    for(int i=0; i<m.nrLinii(); i++)
        1:   28-block  0
       11:   28-block  1
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   28-block  2
branch  3 taken 10 (fallthrough)
branch  4 taken 1
       10:   28-block  3
      110:   29:        for(int j=0; j<m.nrColoane(); j++)
       10:   29-block  0
      110:   29-block  1
call    0 returned 110
branch  1 taken 110 (fallthrough)
branch  2 taken 0 (throw)
      110:   29-block  2
branch  3 taken 100 (fallthrough)
branch  4 taken 10
      100:   29-block  3
      100:   30:            if (i==4)
      100:   30-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 90
      10*:   31:                assert(m.element(i,j) == 3);
       10:   31-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   31-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:   31-block  2
call    5 never executed
        -:   32:            else
      90*:   33:                assert(m.element(i,j) == NULL_TELEMENT);
       90:   33-block  0
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
       90:   33-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 90
    %%%%%:   33-block  2
call    5 never executed
        1:   34:}
        -:   35:
function _Z12testQuantityv called 1 returned 100% blocks executed 93%
        1:   36:void testQuantity() {//scopul e sa adaugam multe date
        2:   37:    Matrice m(300,300);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
call    3 returned 1
    $$$$$:   37-block  2
call    4 never executed
      151:   38:    for(int i=m.nrLinii()/2; i<m.nrLinii(); i++){
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
      151:   38-block  2
call    3 returned 151
branch  4 taken 151 (fallthrough)
branch  5 taken 0 (throw)
      151:   38-block  3
branch  6 taken 150 (fallthrough)
branch  7 taken 1
      150:   38-block  4
    22650:   39:        for(int j=0; j<m.nrColoane()/2; j++)
      150:   39-block  0
    22650:   39-block  1
call    0 returned 22650
branch  1 taken 22650 (fallthrough)
branch  2 taken 0 (throw)
    22650:   39-block  2
branch  3 taken 22500 (fallthrough)
branch  4 taken 150
    22500:   39-block  3
        -:   40:        {
    22500:   41:            int v1=j;
    22500:   42:            int v2=m.nrColoane()-v1-1;
    22500:   42-block  0
call    0 returned 22500
branch  1 taken 22500 (fallthrough)
branch  2 taken 0 (throw)
    22500:   43:            if (i%2==0 && v1%2==0)
    22500:   43-block  0
branch  0 taken 11250 (fallthrough)
branch  1 taken 11250
    11250:   43-block  1
branch  2 taken 5625 (fallthrough)
branch  3 taken 5625
     5625:   44:                m.modifica(i, v1, i*v1);
     5625:   44-block  0
call    0 returned 5625
branch  1 taken 5625 (fallthrough)
branch  2 taken 0 (throw)
        -:   45:            else
    16875:   46:            if (v1%3==0)
    16875:   46-block  0
branch  0 taken 5625 (fallthrough)
branch  1 taken 11250
     5625:   47:                m.modifica(i, v1, i+v1);
     5625:   47-block  0
call    0 returned 5625
branch  1 taken 5625 (fallthrough)
branch  2 taken 0 (throw)
    22500:   48:            if (i%2==0 && v2%2==0)
    22500:   48-block  0
branch  0 taken 11250 (fallthrough)
branch  1 taken 11250
    11250:   48-block  1
branch  2 taken 5625 (fallthrough)
branch  3 taken 5625
     5625:   49:                m.modifica(i, v2, i*v2);
     5625:   49-block  0
call    0 returned 5625
branch  1 taken 5625 (fallthrough)
branch  2 taken 0 (throw)
        -:   50:            else
    16875:   51:            if (v2%3==0)
    16875:   51-block  0
branch  0 taken 5625 (fallthrough)
branch  1 taken 11250
     5625:   52:                m.modifica(i, v2, i+v2);
     5625:   52-block  0
call    0 returned 5625
branch  1 taken 5625 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:        }
        -:   54:    }
      152:   55:    for(int i=0; i<=m.nrLinii()/2; i++){
        1:   55-block  0
      152:   55-block  1
call    0 returned 152
branch  1 taken 152 (fallthrough)
branch  2 taken 0 (throw)
      152:   55-block  2
branch  3 taken 151 (fallthrough)
branch  4 taken 1
      151:   55-block  3
    22801:   56:        for(int j=0; j<m.nrColoane()/2; j++)
      151:   56-block  0
    22801:   56-block  1
call    0 returned 22801
branch  1 taken 22801 (fallthrough)
branch  2 taken 0 (throw)
    22801:   56-block  2
branch  3 taken 22650 (fallthrough)
branch  4 taken 151
    22650:   56-block  3
        -:   57:        {
    22650:   58:            int v1=j;
    22650:   59:            int v2=m.nrColoane()-v1-1;
    22650:   59-block  0
call    0 returned 22650
branch  1 taken 22650 (fallthrough)
branch  2 taken 0 (throw)
    22650:   60:            if (i%2==0 && v1%2==0)
    22650:   60-block  0
branch  0 taken 11400 (fallthrough)
branch  1 taken 11250
    11400:   60-block  1
branch  2 taken 5700 (fallthrough)
branch  3 taken 5700
     5700:   61:                m.modifica(i, v1, i*v1);
     5700:   61-block  0
call    0 returned 5700
branch  1 taken 5700 (fallthrough)
branch  2 taken 0 (throw)
        -:   62:            else
    16950:   63:            if (v1%3==0)
    16950:   63-block  0
branch  0 taken 5650 (fallthrough)
branch  1 taken 11300
     5650:   64:                m.modifica(i, v1, i+v1);
     5650:   64-block  0
call    0 returned 5650
branch  1 taken 5650 (fallthrough)
branch  2 taken 0 (throw)
    22650:   65:            if (i%2==0 && v2%2==0)
    22650:   65-block  0
branch  0 taken 11400 (fallthrough)
branch  1 taken 11250
    11400:   65-block  1
branch  2 taken 5700 (fallthrough)
branch  3 taken 5700
     5700:   66:                m.modifica(i, v2, i*v2);
     5700:   66-block  0
call    0 returned 5700
branch  1 taken 5700 (fallthrough)
branch  2 taken 0 (throw)
        -:   67:            else
    16950:   68:            if (v2%3==0)
    16950:   68-block  0
branch  0 taken 5650 (fallthrough)
branch  1 taken 11300
     5650:   69:                m.modifica(i, v2, i+v2);
     5650:   69-block  0
call    0 returned 5650
branch  1 taken 5650 (fallthrough)
branch  2 taken 0 (throw)
        -:   70:        }
        -:   71:    }
      301:   72:    for(int i=0; i<m.nrLinii(); i++)
        1:   72-block  0
      301:   72-block  1
call    0 returned 301
branch  1 taken 301 (fallthrough)
branch  2 taken 0 (throw)
      301:   72-block  2
branch  3 taken 300 (fallthrough)
branch  4 taken 1
      300:   72-block  3
    90300:   73:        for(int j=0; j<m.nrColoane(); j++)
      300:   73-block  0
    90300:   73-block  1
call    0 returned 90300
branch  1 taken 90300 (fallthrough)
branch  2 taken 0 (throw)
    90300:   73-block  2
branch  3 taken 90000 (fallthrough)
branch  4 taken 300
    90000:   73-block  3
    90000:   74:            if (i%2==0 && j%2==0)
    90000:   74-block  0
branch  0 taken 45000 (fallthrough)
branch  1 taken 45000
    45000:   74-block  1
branch  2 taken 22500 (fallthrough)
branch  3 taken 22500
   22500*:   75:                assert(m.element(i,j) == i*j);
    22500:   75-block  0
call    0 returned 22500
branch  1 taken 22500 (fallthrough)
branch  2 taken 0 (throw)
    22500:   75-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22500
    %%%%%:   75-block  2
call    5 never executed
        -:   76:            else
    67500:   77:            if (j%3==0)
    67500:   77-block  0
branch  0 taken 22500 (fallthrough)
branch  1 taken 45000
   22500*:   78:                assert(m.element(i,j) == i+j);
    22500:   78-block  0
call    0 returned 22500
branch  1 taken 22500 (fallthrough)
branch  2 taken 0 (throw)
    22500:   78-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22500
    %%%%%:   78-block  2
call    5 never executed
   45000*:   79:            else assert(m.element(i,j) == 0);
    45000:   79-block  0
call    0 returned 45000
branch  1 taken 45000 (fallthrough)
branch  2 taken 0 (throw)
    45000:   79-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 45000
    %%%%%:   79-block  2
call    5 never executed
        1:   80:}
        -:   81:
function _Z12testExceptiiv called 1 returned 100% blocks executed 61%
        1:   82:void testExceptii() {
        2:   83:    Matrice m(10,10);
        1:   83-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   83-block  1
call    3 returned 1
    $$$$$:   83-block  2
call    4 never executed
        -:   84:    try {
        1:   85:        m.element(-1,-1);
        1:   85-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
        -:   86:    }
        1:   87:    catch (exception&) {
        1:   87-block  0
call    0 returned 1
call    1 returned 1
        -:   88:        assert(true); //ar trebui sa arunce exceptie
        -:   89:    }
        -:   90:    try {
        1:   91:        m.modifica(12,0,1);
        1:   91-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
        -:   92:    }
        1:   93:    catch (exception&) {
        1:   93-block  0
call    0 returned 1
call    1 returned 1
        -:   94:        assert(true); //ar trebui sa arunce exceptie
        -:   95:    }
        -:   96:    try {
       1*:   97:        assert(m.nrLinii());
        1:   97-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   97-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   97-block  2
call    5 never executed
        -:   98:    }
    =====:   99:    catch (exception&) {
    $$$$$:   99-block  0
call    0 never executed
    =====:  100:        assert(false); //nu ar trebui sa arunce exceptie
call    0 never executed
        -:  101:    }
        1:  102:}
        -:  103:
        -:  104:
        -:  105:
function _Z13testAllExtinsv called 1 returned 100% blocks executed 100%
        1:  106:void testAllExtins() {
        1:  107:    testCreeaza();
        1:  107-block  0
call    0 returned 1
        1:  108:    testAdauga();
call    0 returned 1
        1:  109:    testQuantity();
call    0 returned 1
        1:  110:    testExceptii();
call    0 returned 1
        1:  111:}
        -:  112:
