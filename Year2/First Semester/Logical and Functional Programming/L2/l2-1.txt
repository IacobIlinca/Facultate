;1. Se da un arbore de tipul (1). Sa se afiseze calea de la radacina pana la un nod x dat.
;ex: (A 2 B 0 C 2 D 0 E 0)
(defun parcurg_st(arb nv nm)
;arb = arborele reprezentat in forma (1).
;nv = int, numarul de varfuri
;nm = int, numarul de muchii. 
  (cond
    ((null arb) nil)
    ((= nv (+ 1 nm)) nil)
    (t (cons (car arb) (cons (cadr arb) (parcurg_st (cddr arb) (+ 1 nv) (+ (cadr arb) nm)))))
  )
)

(defun stang(arb)
;arb = arborele reprezentat in forma (1).
  (parcurg_st (cddr arb) 0 0)
)

(defun parcurg_dr(arb nv nm)
;arb = arborele reprezentat in forma (1).
;nv = int, numarul de varfuri
;nm = int, numarul de muchii. 
  (cond
    ((null arb) nil)
    ((= nv (+ 1 nm)) arb)
    (t (parcurg_dr (cddr arb) (+ 1 nv) (+ (cadr arb) nm)))
  )
)

(defun drept(arb)
;arb = arborele reprezentat in forma (1).
  (parcurg_dr (cddr arb) 0 0)
)

(defun exista (arb e)
;arb = arborele reprezentat in forma (1)
;e = atom, nodul pe care il cautam in arbore.
    (cond 
    ((null arb) nil)
    ( (equal ( car arb ) e ) t )
    (t (or ( exista ( stang arb ) e ) ( exista ( drept arb ) e )))
    )
)    

(defun cale(e arb)
;e = atom, nodul pe care il cautam in arbore
;arb = arborele reprezentat in forma (1).
    (cond
    ((null arb) nil)
    ((equal(car arb) e) (list e))
    ((exista (stang arb) e) (cons (car arb) (cale e (stang arb))))
    ((exista (drept arb) e) (cons (car arb) (cale e (drept arb))))
    (t nil)
    )
)

;(cale 'e '(a 2 b 0 c 2 d 0 e 0))
    